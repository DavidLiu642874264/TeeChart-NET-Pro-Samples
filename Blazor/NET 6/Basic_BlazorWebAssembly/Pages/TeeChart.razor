@using System.IO;
@using Steema.TeeChart;
@using Microsoft.JSInterop
@inject IJSRuntime JS

@inject BlazorWebAssemblyProg.Data.UtilService aUtils;

@((MarkupString)(chartImage))
@((MarkupString)(canvasJS))


@code {

    [Parameter]
    public string ChartTitle { get; set; }

    [Parameter]
    public string Type { get; set; }

    [Parameter]
    public string XValues { get; set; }

    [Parameter]
    public string YValues { get; set; }

    [Parameter]
    public string id { get; set; }

    public double KeyCode;

    public int funcType = 0;

    String chartImage;
    String canvasJS;
    String chartJS;
    string canvasName = "canvas1";
    Steema.TeeChart.TChart tChart;

    string remaining;
    string contentSecKey;
    string contentCntKey;

    protected override void OnInitialized()
    {
        canvasName = System.Guid.NewGuid().ToString();

        int aWidth = 900;
        int aHeight = 300;

        CreateChart(aWidth, aHeight);

        if (Type == "js")
        {
            string canvasStr = "<div><canvas id='" + canvasName + "' width='" + aWidth + "' height='" + aHeight + "' style='border: 1px solid #808080;'>";
            canvasStr += "This browser does not seem to support HTML5 Canvas.";
            canvasStr += "</canvas></div>";

            canvasJS = canvasStr;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (Type == "js")
            UpdateJS(900, 300);
    }

    public void UpdateTitle(string ATitle, int func)
    {
        //tChart.Header.Text = ATitle;

        this.funcType = func;

        int aWidth = 900;
        int aHeight = 300;

        CreateChart(aWidth, aHeight);

        /*if (Type == "svg")
            {
            UpdateSVG();
        }*/

        StateHasChanged();
    }

    public void PrepareData(ref double[] xValues, ref double[] yValues)
    {

        string[] xStr = XValues.Split(',');
        string[] yStr = YValues.Split(',');

        xValues = new double[xStr.Length];
        yValues = new double[yStr.Length];

        for (int i = 0; i < xStr.Length; i++)
        {
            xValues[i] = Convert.ToDouble(xStr[i]);
            yValues[i] = Convert.ToDouble(yStr[i]);
        }
    }

    public void CreateChart(int width, int height)
    {
        tChart = new TChart();
        Steema.TeeChart.Styles.Bar mBar = new Steema.TeeChart.Styles.Bar();
        tChart.Header.Text = ChartTitle;

        var trFunc = new Steema.TeeChart.Functions.Function();
        Steema.TeeChart.Styles.Line trLine = new Steema.TeeChart.Styles.Line();

        switch (funcType)
        {
            case 0:
            case 1:
            case 2: { 
                    trFunc = new Steema.TeeChart.Functions.TrendFunction();
                    if (funcType == 1)
                        ((Steema.TeeChart.Functions.TrendFunction)trFunc).TrendStyle = Steema.TeeChart.Functions.TrendStyles.Exponential;
                    else if (funcType == 2)
                    {
                        ((Steema.TeeChart.Functions.TrendFunction)trFunc).TrendStyle = Steema.TeeChart.Functions.TrendStyles.Logarithmic;
                        trLine.VertAxis = Steema.TeeChart.Styles.VerticalAxis.Right;
                        tChart.Axes.Right.Title.Text = "log";
                        tChart.Axes.Right.Title.Visible = true;
                        tChart.Axes.Right.SetMinMax(-1, 1);
                    }
                    else
                      ((Steema.TeeChart.Functions.TrendFunction)trFunc).TrendStyle = Steema.TeeChart.Functions.TrendStyles.Normal;
                    break; 
                }
            case 3: { 
                    trFunc = new Steema.TeeChart.Functions.Average();
                    break; 
                }
            case 4: { 
                    trFunc = new Steema.TeeChart.Functions.MovingAverage();
                    trFunc.Period = 3;
                    break; 
                }
            case 5: { 
                    trFunc = new Steema.TeeChart.Functions.PolyFitting();
                    trFunc.Period = 3;
                    break; 
                }
        }


        tChart.Header.Text = trFunc.GetType().ToString() + ", period: " + trFunc.Period;

        trFunc.Series = trLine;
        trLine.DataSource = mBar;

        tChart.Width = width;
        tChart.Height = height;

        tChart.Legend.Visible = false;
        //tChart.Zoom.Direction = ZoomDirections.None;
        //tChart.Chart.Panning.Allow = ScrollModes.None;

        if (tChart.Series.Count == 0)
            tChart.Series.Add(mBar);

        mBar.Clear();
        mBar.Marks.Transparent = true;

        mBar.BarWidthPercent = 20;

        double[] xValues = new double[0];
        double[] yValues = new double[0];

        PrepareData(ref xValues, ref yValues);

        mBar.Add(xValues, yValues);

        tChart.Series.Add(trLine);
        trLine.CheckDataSource();

        tChart.Axes.Left.Title.Text = "ºC";
        tChart.Axes.Left.SetMinMax(0, 500);
        tChart.Axes.Left.Increment = 50;
        tChart.Axes.Bottom.Increment = 2;

        if (Type == "svg")
            UpdateSVG();
    }

  public void UpdateSVG()
  {
    //create svg chart
    MemoryStream ms = new MemoryStream();
    tChart.Export.Image.SVG.Width = tChart.Width;
    tChart.Export.Image.SVG.Height = tChart.Height;
    tChart.Export.Image.SVG.Save(ms);

    ms.Position = 0;

    StreamReader reader = new StreamReader(ms);

    string result = "<svg width=\"" + tChart.Width + "\"px height=\"" + tChart.Height + "px\">" + reader.ReadToEnd() + "</svg>";

    result = result.Replace("\r\n", "");

    chartImage = "<div><p>" + result + "</p></div>";
  }

  public async void UpdateJS(int width, int height)
  {
    //create javascript chart
    string chartName = "aChart";

    tChart.Export.Image.JScript.ChartName = chartName;

    MemoryStream ms = new MemoryStream();
    tChart.Export.Image.JScript.Width = width;
    tChart.Export.Image.JScript.Height = height;
    tChart.Export.Image.JScript.CanvasName = canvasName;

    tChart.Export.Image.JScript.SourceScriptPath = "https://www.steema.com//files/public/teechart/html5/v2021.04.26.2.7/";

    tChart.Export.Image.JScript.DoFullPage = false; //inline, no page <html> header tags
    tChart.Export.Image.JScript.CustomCode = new string[] { "loadExtras(" + chartName + ")", "resize(" + chartName + ");" };
    tChart.Export.Image.JScript.Save(ms);

    ms.Position = 0;

    StreamReader reader = new StreamReader(ms);

    string result = "var " + chartName + "; " + reader.ReadToEnd();

    chartJS = result;

    string aKey = aUtils.KeyCode; //Pass unique, current load nonce CSP key to js load.

    await JS.InvokeVoidAsync("loadChart", chartJS, aKey);
  }
}
